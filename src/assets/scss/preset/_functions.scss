@use "sass:math";
@use "sass:list";

//@import "_variables";

@function get-var($key, $map-key: null, $bind-with-css: true) { //remove last
  //@if $bind-with-css {
  //  @if $map-key {
  //    @return "--#{$map-key}-#{$key}";
  //  } @else {
  //    @return "--#{$key}";
  //  }
  //}

  $value: map-get($variables, $key); // doesn't work here?

  //@if is-map($value) { //DOESN'T WORK HERE?
  @if type-of($value) == 'map' {
    $value: map-get($value, $map-key);
  }

  @return $value;
}

//@function get-css-var($key, $map-key: null) {
//  $value: map-get($variables, $key); // doesn't work here?
//
//  //@if is-map($value) { //DOESN'T WORK HERE?
//  @if type-of($value) == 'map' {
//    $value: map-get($value, $map-key);
//  }
//
//  @return $value;
//}

@function map-get-strict($map, $key) {
  @if map-has-key($map, $key) {
    @return #{map-get($map, $key)};
  } @else {
    @error "The #{$key} is not in the #{$map} map!";
  }
}

@function add-unit($number, $unit) { // mb refactor
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if not index(map-keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }

  @return $number * map-get($units, $unit);
}

@function to-number($value, $unit: null) {
  @if $unit {
    @return to-number($value + $unit);
  }

  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return add-unit(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + math.div(map-get($numbers, $character), $digits);
    }
  }

  @return if($minus, -$result, $result);
}

@function to-unit($value, $to-unit: 'em', $base-font: $_max-font, $max-viewport-for-vw-vh: 1530px) {
  // if not $_max-font replace $base-font default on 16px
  $result: $value;
  $source-unit: unit($value);
  $value: del-unit($value);
  $base-font: del-unit($base-font);

  @if $source-unit == $to-unit {
    @return $result;
  }

  @if $source-unit == 'px' {
  	@if $to-unit == 'em' or $to-unit == 'rem' {
  		$result: #{math.div($value, $base-font)}#{$to-unit};
  	} @else if($to-unit == 'per') {
  		$result: percentage(math.div($value, $base-font));
  	} @else if $to-unit == 'vw' or $to-unit == 'vh' { // is this need ?
      $result: $result * math.div(to-number(#{100}#{$to-unit}), $max-viewport-for-vw-vh);
    }
  } @else if $source-unit == 'em' or $source-unit == 'rem' { // should be EM computed to parent block instead of to base font ? check it later
    @if ($to-unit == "px") {
  		$result: #{$value * $base-font}#{$to-unit};
  	} @else if ($to-unit == 'per') {
      $result: percentage($value);
    }
  } @else if $source-unit == '%' {
    @if ($to-unit == "px") {
  		$result: #{math.div($value, 100) * $base-font}#{$to-unit};
  	} @else if $to-unit == "em" or $to-unit == 'rem' {
      $result: #{math.div($value, 100)}#{$to-unit};
  	}
  } @else if $source-unit == 'vw' {

  }

  @return to-number($result);
}

@function relative-unit($px) {
  @return to-fixed(to-unit($px, 'rem'), 3);
}

@function calc-responsive($min-size, $max-size, $min-vw: get-var(breakpoint, xs), $max-vw: get-var(container)) { // mb move defaults to to-responsive // ТУТ to-unit() в пиксели переводить

  //add units, css-vars support

  @if not has-unit($min-size) { // нужно ли?
    $min-size: to-number($min-size, 'px');
  } @else {
    $min-size: to-unit($min-size, 'px')
  }

  @if not has-unit($max-size) { // нужно ли?
    $max-size: to-number($max-size, 'px');
  } @else {
    $max-size: to-unit($max-size, 'px')
  }

  @if not has-unit($min-vw) { // нужно ли?
    $min-vw: to-number($min-vw, 'px');
  } @else {
    $min-vw: to-unit($min-vw, 'px')
  }

  @if not has-unit($max-vw) { // нужно ли?
    $max-vw: to-number($max-vw, 'px');
  } @else {
    $max-vw: to-unit($max-vw, 'px')
  }

  @return calc(#{$min-size} + #{del-unit($max-size - $min-size)} * ((100vw - #{$min-vw}) / #{del-unit($max-vw - $min-vw)}));
}

@function del-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return math.div($number, ($number * 0 + 1));
	}

	@return $number;
}





@function sum($list) { // refactor after transform-unit
  $result: 0;

  @each $item in $list {
    $item: to-number($item);
    $item: del-unit($item);
    $result: $result + $item;
  }

  @return $result;
}

// @function len($list) {
//   $result: 0;
//
//   @each $item in $list {
//     $result: $result + 1;
//   }
//
//   @return $result;
// }

@function to-fixed($float, $digits: 4) {
  $pow: math.pow(10, $digits);

  @return math.div(round($float * $pow), $pow);
}

@function repeater($character, $n) {
  $result: "";

  @for $i from 1 through $n {
      @if ($i == 1) {
        $result: $result + $character;
      } @else {
        $result: $result + " " + $character;
      }
  }

  @return unquote($result); // refactor -> if it has quote
}

@function split($string, $separator: ' ', $startAt: 1) {
    $workStr: str-slice($string,$startAt);
    $list: ();
    $indexOfFirstSpace: str-index($workStr,$separator);
    @if $indexOfFirstSpace == null {
        $list: ($workStr);
    } @else {
        $list: (str-slice($workStr, 1, $indexOfFirstSpace - 1));
        $list: join($list,split($workStr, $startAt: $indexOfFirstSpace + 1));
    }
    @return $list;
}

@function soft-nth($list, $i) {
  @if $i > length($list) {
    @return null;
  } @else {
    @return nth($list, $i);
  }
}

@function is-null($value) {
  @return type-of($value) == 'null';
}

@function is-bool($value) {
  @return type-of($value) == 'bool';
}

@function is-calc($value) {
  @return type-of($value) == 'calculation';
}

@function is-func($value) {
  @return type-of($value) == 'function';
}

@function is-args($value) {
  @return type-of($value) == 'arglist';
}

@function is-list($value) {
  @return type-of($value) == 'list';
}

@function is-map($value) {
  @return type-of($value) == 'map';
}

@function is-string($value) {
  @return type-of($value) == 'string';
}

@function is-num($value) {
  @return type-of($value) == 'number';
}

@function is-float($n) {
  @return $n != math.floor($n);
}

@function is-color($value) {
  @return type-of($value) == 'color';
}


@function replace($list, $old-value, $new-value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append(
        $result,
        replace(nth($list, $i), $old-value, $new-value, $recursive)
      );
    } @else {
      @if nth($list, $i) == $old-value {
        $result: append($result, $new-value);
      } @else {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

@function replace-nth($list, $index, $value) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `replace-nth`.";
  } @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `replace-nth`.";
  } @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `replace-nth`.";
  } @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      } @else {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

@function to-string($list, $glue: '', $is-nested: false) {
  $result: null;

  @for $i from 1 through length($list) {
    $e: nth($list, $i);

    @if type-of($e) == list {
      $result: $result#{to-string($e, $glue, true)};
    } @else {
      $result: if(
        $i != length($list) or $is-nested,
        $result#{$e}#{$glue},
        $result#{$e}
      );
    }
  }

  @return $result;
}

@function prepend($list, $value) {
  @return join($value, $list);
}

@function insert-nth($list, $index, $value) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `insert-nth`.";
  } @else if $index < 1 {
    @warn "List index 0 must be a non-zero integer for `insert-nth`";
  } @else if $index > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
  } @else {
    $result: ();

    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      }

      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

@function first($list) {
  @return nth($list, 1);
}

@function last($list) {
  @return nth($list, length($list));
}

@function last-index($list, $value) {
  $index: null;

  @for $i from 1 through length($list) {
    @if nth($list, $i) == $value {
      $index: $i;
    }
  }

  @return $index;
}

/**
 * Last-index v2
 * Less beautiful code
 * Better performance
 */
@function last-index($list, $value) {
  @for $i from length($list) * -1 through -1 {
    @if nth($list, abs($i)) == $value {
      @return abs($i);
    }
  }

  @return null;
}

@function remove($list, $value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, remove(nth($list, $i), $value, $recursive));
    } @else if nth($list, $i) != $value {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

@function remove-nth($list, $index) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  } @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  } @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  } @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i != $index {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

@function reverse($list, $recursive: false) {
  $result: ();

  @for $i from length($list) * -1 through -1 {
    @if type-of(nth($list, abs($i))) == list and $recursive {
      $result: append($result, reverse(nth($list, abs($i)), $recursive));
    } @else {
      $result: append($result, nth($list, abs($i)));
    }
  }

  @return $result;
}


@function slice($list, $start: 1, $end: length($list)) {
  $result: null;

  @if type-of($start) != number or type-of($end) != number {
    @warn "Either $start or $end are not a number for `slice`.";
  }

  @else if $start > $end {
    @warn "The start index has to be lesser than or equals to the end index for `slice`.";
  }

  @else if $start < 1 or $end < 1 {
    @warn "List indexes must be non-zero integers for `slice`.";
  }

  @else if $start > length($list) {
    @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
  }

  @else if $end > length($list) {
    @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
  }

  @else {
    $result: ();

    @for $i from $start through $end {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

@function loop($list, $value: 1) {
  $result: ();

  @for $i from 0 to length($list) {
    $result: append($result, nth($list, ($i - $value) % length($list) + 1));
  }

  @return $result;
}

@function add-indexes($list, $recurse: false) {
  $wrapper: [];
  $i: 1;

  @each $value in $list {

    @if $recurse { // test
      @if is-list($value) {
        $value: add-indexes($value, $recurse);
      }
    }

    $wrapper: append($wrapper, ($value, $i));
    $i: $i + 1;
  }

  @return $wrapper;
}


@function sequence($from: 1, $to: 1) {
  $sequence: [];

  @for $n from $from to $to + 1 {
    $sequence: append($sequence, $n);
    $n: $n + 1;
  }

  @return $sequence;
}


@function _gcd($first, $second) { // combine with gcd()
  $first: math.abs($first);
  $second: math.abs($second);

  @if is-null($second) or $second == 0 {
    @return $first;

  } @else {
    @return _gcd($second, $first % $second);
  }
}

@function gcd($numbers...) {
  $result: 0;

  @each $number in $numbers {
    $result: _gcd($result, $number);
  }

  @return $result;
}

@function _lcm($first, $second) { // combine with lcm()
  $first: math.abs($first);
  $second: math.abs($second);

  @return math.div($first * $second, gcd($first, $second));
}

@function lcm($numbers...) {
  $result: 1;

  @each $number in $numbers {
    $result: _lcm($result, $number);
  }

	@return $result;
}


// @function sort-by-index($list, $depth) {
//
// }
